/*
@codekit-append "rocket88/utils/utils.js"
@codekit-append "rocket88/utils/structures/linked.list.js"
@append "rocket88/utils/structures/quad.tree.js"

@codekit-append "rocket88/utils/geom/point.js"
@codekit-append "rocket88/utils/geom/vector.js"
@codekit-append "rocket88/utils/geom/size.js"
@codekit-append "rocket88/utils/geom/rotation.js"
@codekit-append "rocket88/utils/geom/rectangle.js"
@codekit-append "rocket88/utils/geom/matrix.js"
@codekit-append "rocket88/utils/geom/functions.js"

@codekit-append "rocket88/utils/object.pool.js"
@codekit-append "rocket88/utils/asset.store.js"
@codekit-append "rocket88/utils/asset.loader.js"

@codekit-append "rocket88/object.js"
@codekit-append "rocket88/object.container.js"
@codekit-append "rocket88/director.js"
@codekit-append "rocket88/stage.js"
@codekit-append "rocket88/scene.js"
@codekit-append "rocket88/layer.js"

@codekit-append "rocket88/collisions/collider.js"
@codekit-append "rocket88/collisions/circle.collider.js"
@codekit-append "rocket88/collisions/box.collider.js"
@codekit-append "rocket88/collisions/collision.solver.js"

@codekit-append "rocket88/gameobjects/game.object.js"
@codekit-append "rocket88/gameobjects/interactive.game.object.js"

@codekit-append "rocket88/components/component.js";
@codekit-append "rocket88/components/transform.component.js";
@codekit-append "rocket88/components/graphic.component.js";
@codekit-append "rocket88/components/collision.component.js";
@codekit-append "rocket88/components/screen.component.js";
@codekit-append "rocket88/components/keys.component.js";
@codekit-append "rocket88/components/events.component.js";

@codekit-append "rocket88/cameras/camera.js"
@codekit-append "rocket88/cameras/chase.camera.js"
@codekit-append "rocket88/cameras/scroll.camera.js"

@codekit-append "rocket88/graphics/spritesheet.js"
@codekit-append "rocket88/graphics/sprite.js"
@codekit-append "rocket88/graphics/animated.sprite.js"

@codekit-append "rocket88/sounds/sound.js"
@codekit-append "rocket88/sounds/sound.collection.js"

@codekit-append "rocket88/renderers/renderer.js"
@codekit-append "rocket88/renderers/canvas.renderer.js"
@codekit-append "rocket88/renderers/dom.renderer.js"
*/

/* **********************************************
     Begin utils.js
********************************************** */

(function(window) {
    "use strict";
    
    window.radiansToDegrees = function(radians) { 
        return radians * 180 / Math.PI 
    };


    window.degreesToRadians = function(degrees) { 
        return Math.PI / 180 * degrees 
    };


    window.requestAnimFrame = function() {
        return  window.requestAnimationFrame       || 
                window.webkitRequestAnimationFrame || 
                window.mozRequestAnimationFrame    || 
                window.oRequestAnimationFrame      || 
                window.msRequestAnimationFrame     || 

                function(callback) {
                    window.setTimeout(callback, 1000 / 60);
                };
    };


    window.delegate = function(object, method) {
        return function() { 
            return method.apply(object, arguments);
        };
    };


    window.use = function(name) {
        window[name] = window[name] || {};
        return window[name];
    };


    window.describe = function(object) {
        console.info(object.toJSON(true));
    };
})(window);


/* Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 */
// Inspired by base2 and Prototype
(function(){
  var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;     
  // The base Class implementation (does nothing)
  this.Class = function(){};
 
  // Create a new Class that inherits from this class
  Class.extends = function(prop) {
    var _super = this.prototype;
   
    // Instantiate a base class (but only create the instance,
    // don't run the init constructor)
    initializing = true;
    var prototype = new this();
    initializing = false;       
    // Copy the properties over onto the new prototype
    for (var name in prop) {
      // Check if we're overwriting an existing function
      prototype[name] = typeof prop[name] == "function" &&
        typeof _super[name] == "function" && fnTest.test(prop[name]) ?
        (function(name, fn){
          return function() {
            var tmp = this._super;               
            // Add a new ._super() method that is the same method
            // but on the super-class
            this._super = _super[name];               
            // The method only need to be bound temporarily, so we
            // remove it when we're done executing
            var ret = fn.apply(this, arguments);        
            this._super = tmp;
           
            return ret;
          };
        })(name, prop[name]) :
        prop[name];
    }       

    // The dummy class constructor
    function Class() {
      // All construction is actually done in the init method
      if (!initializing) {
        if(!!this.init) {
            this.init.apply(this, arguments);    
        }

        if(!!this.defineProperties) {        
            this.defineProperties.apply(this);
        }
      }
    }       

    // Populate our constructed prototype object
    Class.prototype = prototype;       

    // Enforce the constructor to be what we expect
    Class.prototype.constructor = Class;
 
    // And make this class extendable
    Class.extends = arguments.callee;       

    return Class;
  };
})();

/* **********************************************
     Begin linked.list.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.LinkedList = Class.extends({
		init: function() {

			this._head = null;
			this._tail = null;
			this._size = 0;
		},

			
		add: function(data) {
			// Adds node with data to the list
			this._size++;	

			var myNode = new rocket88.LinkedListNode(data, this);
			if (this._head)  {
				myNode.prev = this._tail;
				this._tail.next = myNode;
				this._tail = myNode;
			}
			else {
				this._head = myNode;
				this._tail = myNode;
			}
			
			return myNode;
		},
		

		insertBefore: function(data, node) {
			// Inserts a node before another one
			this._size++;
			
			var myNode = new rocket88.LinkedListNode(data, this);
			if (node==this._head) {
				myNode.next = this._head;
				this._head.prev = myNode;
				this._head = myNode;
				
				return myNode;
			}
			
			// Search for the node
			var myPreviousNode = node.prev;
			
			myPreviousNode.next = myNode;
			node.prev = myNode;
			
			myNode.prev = myPreviousNode;
			myNode.next = node;
			
			return myNode;
		},
		
		
		insertAfter: function(data, node) {
			// Inserts a node 
			this._size++;
			
			var myNode = new rocket88.LinkedListNode(data, this);
			if (node==this._tail) {
				this._tail.next = myNode;
				this._tail = myNode;
				
				return myNode;
			}

			myNode.next = node.next;
			myNode.prev = node;
			
			node.next = myNode;
			
			return myNode;
		},	
		
		
		remove: function(node) {
			// Removes a node from the list
			if (node==this._head) {
				this.shift();			
				return true;
			}
			
			// Remove tail
			else if(node==this._tail) {
				this.pop();
				return true;
			}
				
			// Search for the node
			var myNext = node.next;
			var myPrev = node.prev;
			
			myNext.prev = myPrev;
			myPrev.next = myNext;		
			
			this._size--;
			node.dispose();

			return node;
		},
		
		
		shift: function() {
			// Removes the first node from the list
			if (this._head) {
				this._size--;
				if (this._head == this._tail) {
					this._head = null;
					this._tail = null;
				}
				else {
					var myNode = this._head.next;
					myNode.prev = null;
					this._head = myNode;
				}
			}
			
			return this._head;
		},
		

		pop: function() {
			// Removes the last node from the list
			if (this._tail) {
				this._size--;
				if (this._head == this._tail) {
					this._head = null;
					this._tail = null;
				}
				else {
					var myNode = this._tail.prev;
					myNode.next = null;
					this._tail = myNode;
				}
			}
			
			return this._tail;
		},
			

		swap: function(nodeA, nodeB) {
			var myDataA = nodeA.data;
			nodeA.data = nodeB.data;
			nodeB.data = myDataA;
		},


	    sort: function(property) {
	        var myNode = this._extensionList.head();
	        while (myNode) {
	            var myExtension = myNode.data;

	            // Destroy the extension
	            if(myExtension.autoDestroy()) {
	                myExtension.destroy();
	            }

	            myNode = myNode.next;
	        }
	    },


		// Returns a boolean indication if a node exists for data	
		contains: function(data)
		{
			var myNode = this._head;
			while (myNode) {
				if (myNode.data == data) {
					return true;
				}
				
				myNode = myNode.next;
			}
			
			return false;
		},

				
		empty: function() {
			var myNode = this.head;
			while (myNode) {
				var myNextNode = myNode.next;
				this.remove(myNode);
				myNode = myNextNode;
			}
		},


		nodeOf: function(data) {
			var myNode = this._head
			while (myNode) {
				if (myNode.data == data) {
					return myNode;
				}
					
				myNode = myNode.next;
			}
			
			return null;
		},
		

		toArray: function() {
			var myArray = [];
			
			var myNode = this._head;
			while (myNode) {
				myArray.push(myNode.data);
				myNode = myNode.next;
			}
			
			return myArray;
		},


		defineProperties: function() {
			var myProperties = {
				head: { 
					enumerable: true, 
					get: function() { return this._head; }
				},

				tail: { 
					enumerable: true, 
					get: function() { return this._tail; }
				},

				size: { 
					enumerable: true, 
					get: function() { return this._size; }
				},							
			};

			Object.defineProperties(this, myProperties);
		},
	});


	rocket88.LinkedListNode = Class.extends({
		init: function(data, list) {
			this._list = list;
			
			this.data = data;
			this.next = null;
			this.prev = null;

			this.__defineGetter__("list", function() { return this._list });
		},
			
		
		remove: function() {
			this._list.remove(this);
		},


		dispose: function () {
			this._list = null;

			this.data = null;
			this.next = null;
			this.prev = null;
		}
	});

	rocket88.LinkedList.create = function() {
		return new rocket88.LinkedList();
	};
})( use("rocket88") );

/* **********************************************
     Begin point.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Point = Class.extends({
		init: function(x, y) {
			this.set(x, y);
		},
		

		set: function(x, y) {
			this.x = x || 0;
			this.y = y || 0;

			return this;
		},
		

		abs: function() {
			this.x = rocket88.abs(this.x);
			this.y = rocket88.abs(this.y);

			return this;
		},


		add: function(vector) {
			this.x += vector.x;
			this.y += vector.y;

			return this;
		},


		subtract: function(vector) {
			this.x -= vector.x;
			this.y -= vector.y;

			return this;
		},


		multiply: function(value) {
			this.x *= value;
			this.y *= value;

			return this;
		},


		divide: function(value) {
			this.x /= value;
			this.y /= value;

			return this;
		},


		empty: function() {
			this.x = 0;
			this.y = 0;

			return this;
		},


		clone: function() {
			return new rocket88.Point(this.x, this.y);
		},


		copy: function(point) {
			this.x = point.x;
			this.y = point.y;

			return this;
		},


		toCss: function() {
			return "left:" + this.x.toFixed(12) +";top:" + this.y.toFixed(12) + ";";
		},
	});

	rocket88.Point.create = function(x, y) {
		return new rocket88.Point(x, y);
	};	
})( use("rocket88") );

/* **********************************************
     Begin vector.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Vector = rocket88.Point.extends({
		init: function(x, y) {
			this._super(x, y);
		},


		distance: function(vector) {
 			var myX = this.x - vector._x;
            var myY = this.y - vector._y;

            return Math.sqrt(myX * myX + myY * myY);			
		},


		direction: function() {
			var myX = point.x - this.x,
				myY = point.y - this.y;

	   		return Math.atan2(myY, myX);
		},


		dot: function(vector) {
 			return this.x * vector.x + this.y * vector.y;			
		},


		cross: function(vector) {
 			return this.x * vector.x - this.y * vector.y;			
		},


		unit: function() {
			return this.divide(this.length);
		},


		normalize: function() { 
			var myInversed = 1 / this.length;
			this.x *= myInversed;
			this.y *= myInversed;

			return this;
		},
 

		rotate: function(matrix) {
			var myX = this.x * matrix.a + this.y * matrix.b,
				myY = this.x * matrix.c + this.y * matrix.d;

			this.x = myX;
			this.y = myY;

			return this;
		},


		translate: function(matrix) {
			this.x += matrix.tx;
			this.y += matrix.ty;

			return this;
		},


		transform: function(matrix) {
			this.rotate(matrix);
			this.translate(matrix);

			return this;
		},


		clone: function() {
			return new rocket88.Vector(this.x, this.y);
		},


		copy: function(vector) {
			this.x = vector.x;
			this.y = vector.y;

			return this;
		},


		defineProperties: function() {
			var myProperties = {
				length: {
					enumerable: true, 
					get: function() { return Math.sqrt(this.x * this.x + this.y * this.y); }
				},
			}			

			Object.defineProperties(this, myProperties);
		}
	});

	rocket88.Vector.create = function(x, y) {
		return new rocket88.Vector(x, y);
	};
})( use("rocket88") );

/* **********************************************
     Begin size.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Size = Class.extends({
		init: function(width, height) {
			this.set(width, height);
		},


		set: function(width, height) {
			this.width = width || 0;
			this.height = height || 0;

			return this;
		},
		

		empty: function() {
			this.width = 0;
			this.height = 0;

			return this;
		},


		clone: function() {
			return new rocket88.Size(this.width, this.height);
		},


		copy: function(size) {
			this.width = size.width;
			this.height = size.height;

			return this;
		},


		toString: function() {
			return "[size width=" + this.width + " height=" + this.height + "]";
		},


		toCss: function () {
			return "width:" + this.width.toFixed(12) + ";height:" + this.height.toFixed(12) + ";";
		},


		defineProperties: function() {
			Object.defineProperties(this, {
				isEmpty: { 
					enumerable: true, 
					get: function() { return this.width==0 && this.height==0; }
				}
			});
		},
	});

	rocket88.Size.create = function(width, height) {
		return new rocket88.Size(width, height);
	};
})( use("rocket88") );


/* **********************************************
     Begin rotation.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Rotation = Class.extends({
		init: function() {
			this._degrees = 0;
			this._radians = 0;
		},


		defineProperties: function() {
			var myProperties = {
				degrees: { 
					get: function() { return this._degrees; },
					set: function(degrees) {
						this._degrees = degrees;
						this._radians = degreesToRadians(degrees);
					},
				},

				radians: { 
					get: function() { return this._radians; },
					set: function(radians) { 
						this._radians = radians;
						this._degrees = radiansToDegrees(radians);
					},
				}
			};

			Object.defineProperties(this, myProperties)
		},
	});

	rocket88.Rotation.create = function() {
		return new rocket88.Rotation();
	};
})( use("rocket88") );

/* **********************************************
     Begin rectangle.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Rectangle = Class.extends({
		init: function(x, y, width, height) {			
			this._topLeft = new rocket88.Point();
			this._size = new rocket88.Size();

			this.set(x, y, width, height);
		},


		set: function(x, y, width, height) {
			this._topLeft.set(x, y);
			this._size.set(width, height);

			return this;
		},

		
		center: function() {
			this._topLeft.x = -this._size.width >> 1;
			this._topLeft.y = -this._size.height >> 1;	
		},


		contains: function(point) {
			var myHorizontal = point.x > this.left && point.x < this.right;
			var myVertical = point.y > this.top && point.y < this.bottom;

			return myHorizontal && myVertical;
		},


		union: function(rectangle) {
			this._topLeft.x = rocket88.min(this._topLeft.x, rectangle._topLeft.x);
			this._topLeft.y = rocket88.min(this._topLeft.y, rectangle._topLeft.y);
			
			var myRight = rocket88.max(this.right, rectangle.right);
			this.size.width = myRight - this._topLeft.x;

			var myBottom = rocket88.max(this.right, rectangle.right);
			this.size.height = myRight - this._topLeft.y;
		},


		inflate: function(size) {
			this._topLeft.x(this._topLeft.x - size.width);
			this._size.width(this._size.width + size.width * 2);

			this._topLeft.y(this._topLeft.y - size.height);
			this._size.height(this._size.height + size.height * 2);
		},


		deflate: function(size) {
			this._topLeft.x(this._topLeft.x + size.width);
			this._size.width(this._size.width - size.width * 2);

			this._topLeft.y(this._topLeft.y + size.height);
			this._size.height(this._size.height - size.height * 2);
		},


		intersects: function(rectangle) {
			return !(rectangle.left > this.right || 
           			 rectangle.right < this.left || 
           			 rectangle.top > this.bottom ||
           			 rectangle.bottom < this.top);			
		},


		empty: function() {
			this._topLeft.empty();
			this._size.empty();
		},


		clone: function() {
			return new rocket88.Rectangle(this._topLeft.x, this._topLeft.y, this._size.width, this._size.height);
		},


		copy: function(rectangle) {
			this._topLeft.x = rectangle.left;
			this._topLeft.y = rectangle.top;
			this._size.width = rectangle.size.width;
			this._size.height = rectangle.size.height;

			return this;
		},


		toCss: function() {
			return this._topLeft.toCss() + this._size.toCss();
		},


		defineProperties: function() {
			var myProperties = {
				origin: {
					enumerable: true, 
					get: function() { return this._topLeft; }
				},

				size: {
					enumerable: true, 
					get: function() { return this._size; }
				},

				top: {
					enumerable: true,
					get: function() { return this._topLeft.y; }
				},

				right: {
					enumerable: true,
					get: function() { return this._topLeft.x + this._size.width; }
				},	

				bottom: {
					enumerable: true,
					get: function() { return this._topLeft.y + this._size.height; }
				},	

				left: {
					enumerable: true,
					get: function() { return this._topLeft.x; }
				},
			};

			Object.defineProperties(this, myProperties);
		},
	});

	rocket88.Rectangle.create = function(x, y, width, height) {
		return new rocket88.Rectangle(x, y, width, height);
	};
})( use("rocket88") );

/* **********************************************
     Begin matrix.js
********************************************** */

(function(rocket88) {
	"use strict";
	
	rocket88.Matrix = Class.extends({
		init: function(a, b, c, d, tx, ty) {
			this.a = a || 1;
			this.b = b || 0;
			this.c = c || 0;
			this.d = d || 1;

			this.tx = tx || 0;
			this.ty = ty || 0;
		},
		

		identity: function() {
			this.a = 1;
			this.b = 0;
			this.c = 0;
			this.d = 1;

			this.tx = 0;
			this.ty = 0;

			return this;
		},
		

		inverse: function() {
	 		var myDeterminant = this.a * this.d - this.b * this.c;
			var myA = this.d / myDeterminant,
	        	myB = -1 * this.b / myDeterminant,
				myC = -1 * this.c / myDeterminant,
				myD = this.a / myDeterminant,
				myTx = (this.c * this.ty - this.d * this.tx) / myDeterminant,
				myTy = (this.b * this.tx - this.a * this.ty) / myDeterminant;

			this.a = myA;
			this.b = myB;
			this.c = myC;
			this.d = myD;
			this.tx = myTx;
			this.ty = myTy;

			return this;
		},


		multiply: function(matrix) {
			var myA = this.a * matrix.a + this.c * matrix.b,
	        	myB = this.b * matrix.a + this.d * matrix.b,
				myC = this.a * matrix.c + this.c * matrix.d,
				myD = this.b * matrix.c + this.d * matrix.d,
				myTx = this.a * matrix.tx + this.c * matrix.ty + this.tx,
				myTy = this.b * matrix.tx + this.d * matrix.ty + this.ty;

			this.a = myA;
			this.b = myB;
			this.c = myC;
			this.d = myD;
			this.tx = myTx;
			this.ty = myTy;

			return this;		
		},


		translate: function(x, y) {
			var myMatrix = new rocket88.Matrix(1, 0, 0, 1, x, y);		
			this.multiply(myMatrix);

			return this;		
		},
		

		rotate: function(radians) {
			var mySine 	= Math.sin(radians),
				myCosine = Math.cos(radians);

			var myMatrix = new rocket88.Matrix(myCosine, mySine, -1 * mySine, myCosine);	
			this.multiply(myMatrix);

			return this;
		},

		
		scale: function(x, y) {
			var myMatrix = new rocket88.Matrix(x, 0, 0, y);
			this.multiply(myMatrix);

			return this;
		},


		clone: function() {
			return new rocket88.Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);
		},


		copy: function(matrix) {
			this.a = matrix.a;
			this.b = matrix.b;
			this.c = matrix.c;
			this.d = matrix.d;

			this.tx = matrix.tx;
			this.ty = matrix.ty;

			return this;
		},


		toCss: function() {
			var myMatrix = "matrix(" + this.a.toFixed(12) + "," + this.b.toFixed(12) + "," + this.c.toFixed(12) + "," + this.d.toFixed(12) + "," + this.tx.toFixed(12) + "," + this.ty.toFixed(12) + ")";
			var myCSS = "-moz-transform:" + myMatrix + ";-webkit-transform:" + myMatrix + ";-o-transform:" + myMatrix + ";transform:" + myMatrix + ";";

			return myCSS;
		}
	});	

	rocket88.Matrix.create = function(a, b, c, d, tx, ty) {
		return new rocket88.Matrix(a, b, c, d, tx, ty);
	};
})( use("rocket88") );

/* **********************************************
     Begin functions.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.round = function(x) {
		return x + (x < 0 ? -0.5 : 0.5)>>0;
	};


	rocket88.ceil = function(x) {
		return x + (x < 0 ? 0 : 1) >> 0;
	};


	rocket88.floor = function(x) {
		return x + (x < 0 ? -1 : 0) >> 0;
	};


    rocket88.max = function(x, y) {
        return x > y ? x : y;
    };


    rocket88.min = function(x, y) {
        return x < y ? x : y;
    };


    rocket88.abs = function(x) {
		return x < 0 ? -x : x;    	
    };
})( use("rocket88" ));

/* **********************************************
     Begin object.pool.js
********************************************** */



/* **********************************************
     Begin asset.store.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.AssetStore = Class.extends({
		init: function() {
			if(rocket88.assetStore) {
				throw ReferenceError("Houston, we have a problem. AssetStore is a singleton class. Use rocket88.assetStore method to get a reference.");
			}

			this._disposed = false;
			this._assets = new Object();
		},


		addAsset: function(asset, path) {
			if(this.hasAsset(path)) {
				console.error("Unable to add asset: " + path + " to AssetStore. Asset already exists.");
				return;
			}

			if(!asset) {
				console.error("Unable to add asset: " + path + " to AssetStore. Asset cannot be undefined.");
				return;			
			}

			this._assets[path] = asset;
		},


		removeAllAssets: function() {
			for (var path in this._assets) {
				delete this._assets[path];
			}

			this._assets = new Object();
		},


		getAsset: function(path) {
			if(!this.hasAsset(path)) {
				console.error("Asset doesn't exist: " + path);	
			}

			return this._assets[path];
		},


		assetType: function(path) {
			return path.split(".").pop();
		},


		hasAsset: function(path) {
			return this._assets[path] != null;
		},


		dispose: function() {
	        if(this._disposed) {
	        	console.error("Unable to dispose object: " + this.name);	
	        }

			console.info(this.type + ": " + this.name + " is disposed");	
		
			this.removeAllAssets();
			
			this._disposed = true;		
			this._assets = null;
		},


		defineProperties: function() {
			Object.defineProperties(this, {
				assets: {
					get: function() { 
						var myAssets = new Array();
						for (var path in this._assets) {
							myAssets.push(path);
						}

						return myAssets; 
					}
				}
			});
		},
	});
})( use("rocket88") );
	


/* **********************************************
     Begin asset.loader.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.AssetLoader = Class.extends({

		init: function() {
			if(rocket88.assetLoader) {
				throw ReferenceError("Houston, we have a problem. AssetLoader is a singleton class. Use rocket88.assetLoader to get a reference.");
			}

			this._currentIndex = 0;
			this._queue = new Array();
			this._running = false;
			this._disposed = false;

			this._imageExtensions = ["png", "jpg", "jpeg", "gif"];
			this._textExtensions = ["txt", "xml", "json", "php"];
			this._soundExtensions = ["wav", "mp3", "ogg"];

			this.addToAssetStore = true;
		},


		addAsset: function(url) {
			if(this._isRunning) {
				console.warn("");
				return;
			}

			this._queue.push(url);
		},


		addAssets: function(assets) {
			this._queue = this._queue.concat(assets);
		},


		downloadAll: function(totalSize) {
			if(this._running) {
				return;
			}

			this._currentIndex = -1;
			this._running = true;
			this._totalSize = totalSize;

			this.downloadNext();
		},


		downloadNext: function() {
			this._currentIndex++;
			var myURL = this._queue[this._currentIndex];

			var myExtension = myURL.split(".").pop().toLowerCase();

			// Download as text
			if (this._textExtensions.indexOf(myExtension)>-1) {
				this.downloadTextFile(myURL);
			}

			// Download image
			else if(this._imageExtensions.indexOf(myExtension)>-1) {
				this.downloadImage(myURL);
			}

			// Download sound
			else if (this._soundExtensions.indexOf(myExtension)>-1) {
				this.downloadAudio(myURL);
			}		
		},


		downloadTextFile: function(url) {
			var self = this;
			var myXHR = new XMLHttpRequest();

			myXHR.onprogress = function(event) {
			}

			myXHR.onreadystatechange=function(event) {
				if (myXHR.readyState==4 && myXHR.status==200) {
					var myExtension = url.split(".").pop().toLowerCase();

					var myResponse = undefined;
					switch(myExtension) {
						case "json":
							myResponse = JSON.parse(this.response);
							break;

						default:
							myResponse = this.response;
							break;
					}
					if(self.addToAssetStore) {
						rocket88.assetStore.addAsset(myResponse, url);
					}

					self.onAsset(url, myResponse, this.response);
					if(self._currentIndex==self._queue.length-1) {
						this._running = false;
						self.onComplete();
						return;
					}

					self.downloadNext();
				}
			}

			myXHR.open("GET", url, true);
			myXHR.send();
		},


		downloadImage: function(url) {
			var self = this;
			var myImage = new Image();

			myImage.onprogress = function(event) {
			}

			myImage.onload = function (event) {
				if(self.addToAssetStore) {
					rocket88.assetStore.addAsset(this, url);
				}

				self.onAsset(url, this, undefined);
				if(self._currentIndex==self._queue.length-1) {
					this._running = false;
					self.onComplete();
					return;
				}

				self.downloadNext();
			}

			myImage.src = url;
		},


		downloadAudio: function(url) {
			var myAudio = document.createElement("audio");
			if(myAudio.play && myAudio.canPlayType("audio/mpeg"))
		   	{
				this.song = new Audio(url);
				this.song.load();
		    }
		},


		onProgress: function(progress) {
		},


		onAsset: function(url, asset, rawData) {
		},


		onComplete: function() {
		},


		dispose: function() {
	        if(this._disposed) {
	        	console.error("Unable to dispose object: " + this.name);	
	        }

			this._super();
			this._assetStore = null;
		},
	});
})( use("rocket88") );

/* **********************************************
     Begin object.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Object = Class.extends({
		init: function(name) {
			this._type = "object";
			this._createdAt = new Date();
			this._name = name || "unnamed" + rocket88.abs( Math.random() * this._createdAt.getTime() | 0 );
			this._ready = false;
			this._disposed = false;

			this.autoDispose = true;
			this.tag = 0;
		},


		ready: function() {
			this._ready = true;
			console.info(this.type + ": " + this._name + " is ready");	
		},
		

		update: function() {	
			if(!this._ready) {
				return;
			}
		},


		toJSON: function(describeChildren) {
			var myRexExp = /^\s*function\s+(?:\w*\s*)?\((.*?)\)/;
			function introspect(func) {
			    return (func = func.toString().match(myRexExp)) ? (func[1] ? func[1].trim().split(/\s*,\s*/) : []) : null;
			}			

			var myDescription = {};
			for (var key in this) {
				var myObject = this[key];
				myDescription[key] = myObject;

				switch(typeof this[key]) {
					case "object":
						if(describeChildren && !!myObject.toJSON) {
							myDescription[key] = myObject.toJSON(false);
						}
						break;

					case "function":
						myDescription[key] = introspect(this[key]);
						break;
				}
			}

			return myDescription;
		},


		fromJSON: function(json) {
		},


		dispose: function() {
	        if(this._disposed) {
	        	console.assert(!Rocket88.showErrors, "Unable to dispose object: " + this.name);	
	        }

			console.info(this.type + ": " + this._name + " is disposed");	
			
			delete this.director;
			delete this._createdAt;
			delete this._assetStore;	
			delete this._name;
	        delete this._world;
	        delete this._type;

	        this._disposed = true;
	    },


	    defineProperties: function() {
	    	// Getters/ setters
	    	var myProperties = {
	    		type: { 
	    			enumerable: true, 
	    			get: function() { return this._type; }
	    		},
			    
			    name: { 
			    	enumerable: true, 
			    	get: function() { return this._name; }
			    },
			    
			    createdAt: { 
			    	enumerable: true, 
			    	get: function() { return this._createdAt; }
			    },
			    
			    isReady: { 
			    	enumerable: true, 
			    	get: function() { return this._ready; }
			    },

			    isDisposed: { 
			    	enumerable: true, 
			    	get: function() { return this._disposed; }
			    },
			};

			// Hide private properties
	    	for (var key in this) {
	    		if(key.indexOf("_") == 0) {
	    			myProperties[key] = {enumerable: false};
	    		}
	    	}

	    	Object.defineProperties(this, myProperties);
	    },
	});
})( use("rocket88") );


/* **********************************************
     Begin object.container.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.ObjectContainer = rocket88.Object.extends({
		init: function(name) {
			this._super(name);

			this._type = "object.container";
			this._children = new rocket88.LinkedList();
			this._childrenByName = new Object();

			this.parent = undefined;
		},


		ready: function() {
			this._super();

			var myNode = this._children.head;
			while (myNode) {
				myNode.data.ready();
				myNode = myNode.next;
			}
		},


		update: function() {
			this._super();

			var myNode = this._children.head;
			while (myNode) {
				myNode.data.update();
				myNode = myNode.next;
			}
		},


		addChild: function(child) {	
			if(child.isDisposed) {
				console.assert(!rocket88.showErrors, "Unable to add disposed child: " + child.name + " to container: " + this.name);
				return this;
			}

			// Fail if the child doesn't have a unique name
			if(this.hasChild(child.name)) {
				console.assert(!rocket88.showErrors, "Unable to add child: " + child.name + " to container: " + this.name + " Required property 'name' must be unique");
				return this;
			}
		
			child.parent = this;

			if(this.isReady) {
				child.ready();
			}

			this._children.add(child);
			this._childrenByName[child.name] = child;
	        
	        return child;
		},


		insertChildAbove: function(childA, childB) {
			if(this.hasChild(childB.name)) {
				console.assert(!rocket88.showErrors, "Unable to add child: " + childA.name + " above child: " + childB.name + " The latter doesn't exists in container: " + this.name);
				return this;
			}
			
			if(this.isReady) {
				childA.ready();
			}

			this._children.insertAfter(childA, myNode);
			this._childrenByName[childA.name] = childA;
			
			return this;
		},


		insertChildBelow: function(childA, childB) {
			if(this.hasChild(childB.name)) {
				console.assert(!rocket88.showErrors, "Unable to add child: " + childA.name + " below child: " + childB.name + " The latter doesn't exists in container: " + this.name);
				return this;
			}
			
			if(this.isReady) {
				childA.ready();
			}

			this._children.insertBefore(childA, myNode);
			this._childrenByName[childA.name] = childA;
			
			return this;
		},


		swapChildren: function(childA, childB) {
			if(!this.hasChild(childA.name) || !this.hasChild(childB.name)) {
				console.assert(!rocket88.showErrors, "Unable to swap child: " + childA.name + " with child:" + childB.name);
				return this;
			}
			
			var myNodeA = this._children.nodeOf(childA);
			var myNodeB = this._children.nodeOf(childB);
			this._children.swap(myNodeA, myNodeB);
		
			return this;		
		},


		removeChild: function(child) {	
			if(!this.hasChild(child.name)) {
				console.assert(!rocket88.showErrors, "Unable to remove child: " + child.name + " from container: " + this.name + " child doesn't exists in container: " + this.name);
				return this;
			}

			this._children.nodeOf(child).remove();
			delete this._childrenByName[child.name];

			if(child.autoDispose) {
				child.dispose();
			}

			return this;
		},


		removeAllChildren: function(name) {
			var myNode = this._children.head;
			while (myNode) {

				var myChild = myNode.data;
				if(myChild.autoDispose) {
					myChild.dispose();
				}

				var myNextNode = myNode.next;
				this._children.remove(myNode);
				myNode = myNextNode;
			}

			this._childrenByName = new Object();
		},


		getChildByName: function(name) {
			return this._childrenByName[name];
		},


		getChildByTag: function(tag) {
			var myNode = this._children.head;
			while (myNode) {
				var myChild = myNode.data;
				if(myChild.tag>0 && myChild.tag==tag) {
					return myChild;
				}

				myNode = myNode.next;
			}

			return null;
		},


		hasChild: function(name) {	
			return this._childrenByName[name] != null;
		},
	    

		dispose: function() {
			this._super();

			this.removeAllChildren();
			this._collisionSolver.dispose();

			delete this._children;
			delete this._childrenByName;
		},


	    defineProperties: function() {
	    	this._super();

			// Getters/ setters
	    	Object.defineProperties(this, {
	    		children: { 
					enumerable: true, 
	    			get: function() { return this._children.toArray(); }
	    		},
	    	});	    	
		},		
	});
})( use("rocket88") );

/* **********************************************
     Begin director.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Director = Class.extends({
		init: function(target) {		
			if(!!window.director) {
				throw ReferenceError("Houston, we have a problem. Director is a singleton class. Use director to get a reference.");
			}

			console.log("This game utilises the Rocket88 engine");
			window.director = this;

			this._type = "director";
			this._accumulator = 0;
			this._crashed = false;
			this._currentScene = null;
			this._currentTime = new Date().getTime();
			this._frameTime = 1000 / 60;
			this._paused = false;
			this._stage = new rocket88.Stage(target);
			this._renderer = new rocket88.CanvasRenderer(this._stage);

			rocket88.director = this;
			rocket88.assetStore = new rocket88.AssetStore();
			rocket88.assetLoader = new rocket88.AssetLoader();

			rocket88.showWarnings = true;
			rocket88.showErrors	= true;
			rocket88.drawPaintRectangles = false;

			rocket88.version = "0.11";
			rocket88.authors = "Patrick Pietens";			
		},


		updateWithFixedTimestep: function() {	
			if (!this._paused && !this._crashed) {		
				requestAnimationFrame(delegate(this, this.updateWithFixedTimestep));

				// Set local properties
				var myNow = new Date().getTime();
				var myTimestep = myNow - this._currentTime;

				// Update the time & accumulator
				this._accumulator += myTimestep;
				this._currentTime = myNow;

				// Render the scene according the time accumulator
				while(this._accumulator >= this._frameTime) {
					this._accumulator -= this._frameTime;
					this.update();
				}		
			}
		},


		update: function() {
			this._frame++;

			this._renderer.prerender();
			this._currentScene.update();
			this._renderer.render();
		},


		liftOff: function() {
			if(!this._currentScene) {
	            throw ReferenceError("Houston, we have a problem. Required argument 'scene' is missing");
	            return this;
	        }

			if(!this._renderer) {
				throw ReferenceError("Houston, we have a problem. Required argument 'renderer' is missing");
				return this;
			}
			
			this._currentScene.ready();
			this._renderer.ready();

			console.info("director: we have a lift off!");	 

			this._paused = false;
			this.updateWithFixedTimestep();

			return this;
		},


		land: function() {
			this._paused = true;
			return this;
		},	


		crash: function() {
	        if(!!this._crashed) {
	        	throw ReferenceError("Houston, we have a problem. Unable to crash Rocket88 game");	
	        	return this;
	        }

			console.info("director: Rocket88 crashed to the ground");

			this._currentScene.dispose();
			this._stage.dispose();
			this._renderer.dispose();

			this._currentTime 	= 0;
			this._paused 		= false;
			this._crashed		= true;

			delete this._currentTime;
			delete this._currentScene;
			delete this._renderer;
			delete this._stage;

			return this;
		},


		toString: function() {
			return "[" + this.type + " running=" + !this._paused + " crashed="+ this._crashed +"]";
		},


		defineProperties: function() {
			var myProperties = {
				type: {
					enumerable: true, 
					get: function() { 
						return "director"; 
					}
				},

				isCrashed: {
					enumerable: true, 
					get: function() { return this._crashed; }
				},

				stage: {
					enumerable: true,
					get: function() { return this._stage; }
				},

				renderer: {
					enumerable: true, 
					get: function() { return this._renderer; },
					set: function(renderer) {
						if(!!this._renderer && this._renderer.autoDispose) {
							this._renderer.dispose();
						}

						this._renderer = renderer;
					}
				},

				scene: {
					enumerable: true, 
					get: function() { return this._currentScene; },
					set: function(scene) {
						if(!!this._currentScene && this._currentScene.autoDispose) {
							this._currentScene.dispose();
						}

						this._currentScene = scene;
					}
				},
			};

			Object.defineProperties(this, myProperties);
		},
	});
})( use("rocket88") );

/* **********************************************
     Begin stage.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Stage = rocket88.Object.extends({
		init: function(target) {
			this._super();

			this._target = target;
			this._bounds = new rocket88.Rectangle(0, 0, this._target.width, this._target.height);
			this._bounds.center();
		},


		dispose: function() {
			this._super();

			delete this._target;
			delete this._bounds;
		},


		defineProperties: function() {
			var myProperties = {
				target: {
					enumerable: true,
					get: function() { return this._target }
				},

				bounds: {
					enumerable: true,
					get: function() { return this._bounds }
				}
			};

			Object.defineProperties(this, myProperties);
		}
	});
})( use("rocket88") );

/* **********************************************
     Begin scene.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Scene = rocket88.ObjectContainer.extends({	
		init: function(name) {
			this._super(name);

			this._type = "scene";
			this._camera = new rocket88.Camera();
		},


		update: function() {
			this._camera.update();
			this._super();
		},


		dispose: function() {
			this._super();
	        delete this._camera;
		},


		defineProperties: function() {
			this._super();

			var myProperties = {
	    		director: { 
					enumerable: true, 
	    			get: function() { return this.parent; } 
	    		},

				camera: {
					enumerable: true, 
					get: function() { return this._camera; },
					set: function(camera) {
						if(!!this._camera && this._camera.autoDispose) {
							this._camera.dispose();
						}

						this._camera = camera;
					}
				}
	    	};

	    	Object.defineProperties(this, myProperties);
		},		
	});
})( use("rocket88") );


/* **********************************************
     Begin layer.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Layer = rocket88.ObjectContainer.extends({
		init: function(name) {	
			this._super(name);
			
			this._type = "layer";
			this._transform = new rocket88.TransformComponent()

			this._collisionSolver = new rocket88.CollisionSolver();
			this._collisionSolver.layer = this;

			this.depth = 0;
		},


		ready: function() {
			this._super();
			this._collisionSolver.ready();
		},


		update: function() {
	        this.calculateTransform();
	        this._collisionSolver.update();

			var myNode = this._children.head;
			while (myNode) {

				var myGameObject = myNode.data;
				myGameObject.update();
				myGameObject.draw();

				myNode = myNode.next;
			}
		},


		calculateTransform: function() {
			var myCamera = this.scene.camera;

			this._transform.x = -1 * myCamera.transform.x * myCamera.zoom;
			this._transform.y = -1 * myCamera.transform.y * myCamera.zoom;
			this._transform.scale = myCamera.zoom;			

			if (this.depth!=0) {
				var myFocalLength = myCamera.focalLength,
					myScale = myFocalLength / (myFocalLength + this.depth);

				this._transform.x *= myScale;
				this._transform.y *= myScale;
			}
		},


		dispose: function() {
			this._super();	
			delete this._collisionSolver;
		},


		defineProperties: function() {
			this._super();

			var myProperties = {
				scene: {
					enumerable: true, 
					get: function() { return this.parent; }
				},
				
				collisionSolver: {
					enumerable: true, 
					get: function() { return this._collisionSolver; },
					set: function(camera) {
						if(!!this._collisionSolver && this._collisionSolver.autoDispose) {
							this._collisionSolver.dispose();
						}

						this._collisionSolver = collisionSolver;
					}
				},

		    	transform: {
					enumerable: true, 
		    		get: function() { return this._transform; } 
		    	},				
			};

			Object.defineProperties(this, myProperties);
		},
	});
})( use("rocket88") );

/* **********************************************
     Begin collider.js
********************************************** */

(function(rocket88) {
	"use strict";

})( use("rocket88") );

/* **********************************************
     Begin circle.collider.js
********************************************** */

(function(rocket88) {
	"use strict";

})( use("rocket88") );

/* **********************************************
     Begin box.collider.js
********************************************** */

(function(rocket88) {
	"use strict";

})( use("rocket88") );

/* **********************************************
     Begin collision.solver.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.CollisionSolver = rocket88.Object.extends({
		init: function(name) {	
			this._super(name || "collision.solver");
			this._cameraMatrix = new rocket88.Matrix();
		},


		update: function() {
			this._super();

			var myCamera = this.layer.scene.camera,
				myMatrix = myCamera.transform.matrix;

			this._cameraMatrix.identity();
			this._cameraMatrix.multiply(myMatrix);
			this._cameraMatrix.inverse();
		},


		addObject: function(gameobject) {
			var myMatrix = gameobject.transform.matrix;
			myMatrix.multiply(this._cameraMatrix);
		},


		test: function(gameobject) {
		},


		raycast: function(gameobject) {

		},
		

		testBoxBox: function(boxA, boxB) {
		},


		testBoxPoint: function(box, point) {
		},


		textCirclePoint: function(circle, point) {
		},


		testBoxCircle: function(box, circle) {
		},


		dispose: function() {
			this._super();

			delete this._camera;
		}
	});
})( use("rocket88") );

/* **********************************************
     Begin game.object.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.GameObject = rocket88.Object.extends({
		init: function(name) {
			this._super(name);

			this._type = "game.object";
			this._components = new rocket88.LinkedList();

			this._transform	= new rocket88.TransformComponent();
			this._transform.parent = this;

			this._graphic = new rocket88.GraphicComponent();
			this._graphic.parent = this;

			this._collision = new rocket88.CollisionComponent();
			this._collision.parent = this;

			this._screen = new rocket88.ScreenComponent();
			this._screen.parent = this;
		},

				
		ready: function() {		
			this._super();

			this._transform.ready();
			this._screen.ready();
			this._collision.ready();
			this._graphic.ready();
		},

		
		update: function() {			
			this._transform.update();
			this._screen.update();
			this._collision.update();
			this._graphic.update();

			this._super();
		},


		draw: function() {	
			var myRenderer = rocket88.director.renderer;
			myRenderer.bufferObject(this);
		},
		

		dispose: function() {
			this._super();

			this._graphic.dispose();
			this._transform.dispose();
			this._collision.dispose();
			this._screen.dispose();
			
			delete this._components;
			delete this._graphic;
			delete this._transform;
			delete this._collision;
			delete this._screen;
		},


	    defineProperties: function() {
	    	this._super();
	    	
	    	var myProperties = {
	    		layer: {
					enumerable: true, 
		    		get: function() { return this.parent; } 
		    	},

		    	transform: {
					enumerable: true, 
		    		get: function() { return this._transform; } 
		    	},

		    	graphic: {
					enumerable: true, 
		    		get: function() { return this._graphic; } 
		    	},

		    	collision: {
					enumerable: true, 
		    		get: function() { return this._collision; } 
		    	},

		    	screen: {
		    		enumerable: true,
		    		get: function() { return this._screen }
		    	},
		    };

		    Object.defineProperties(this, myProperties);
		},	
	});
})( use("rocket88") );

/* **********************************************
     Begin interactive.game.object.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.InteractiveGameObject = rocket88.GameObject.extends({
		init: function(name) {
			this._super(name);

			this._keys = new rocket88.KeysComponent();
			this._mouse = new rocket88.MouseComponent();

			this.addComponent(this._keys);		
		},


		dispose: function() {
			this._super();

			this._keys.dispose();
			this._mouse.dispose();

			delete this._keys;
			delete this._mouse;
		},


	    defineProperties: function() {
	    	this._super();
	    	
	    	var myProperties = {
	    		keys: {
					enumerable: true, 
	    			get: function() { return this._keys; } 
	    		},

		    	mouse: {
					enumerable: true, 
		    		get: function() { return this._mouse; } 
		    	}
		    };

		    Object.defineProperties(this, myProperties);
		},
	});
})( use("rocket88") );

/* **********************************************
     Begin component.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Component = rocket88.Object.extends({
		init: function(name) {
			this._super(name);
			this._type = "component";
		},
	});
})( use("rocket88") );

/* **********************************************
     Begin transform.component.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.TransformComponent = rocket88.Component.extends({
		init: function(name) {
			this._super(name || "transform.component");		

			this._scale	= 1.0;
			this._flippedX = false;
			this._flippedY = false;
			this._position = new rocket88.Point();
			this._rotation = new rocket88.Rotation();	
			this._matrix = new rocket88.Matrix();
			this._changed = true;

			this.scaleX	= 0;
			this.scaleY	= 0;
			this.snapToPixels = true;
		},


		update: function() {
			this._super();
			this._changed = false;
		},


		flipX: function(direction) {
			this._flippedX = !this._flippedX;
			this._changed = true;

			if(!!direction) {
				this._flippedX = direction;
			}

			return this;
		},


		flipY: function(direction) {
			this._flippedY = !this._flippedY;
			this._changed = true;

			if(!!direction) {
				this._flippedY = direction;
			}

			return this;
		},


		dispose: function() {
			this._super();

			delete this._scale;
			delete this._flippedX;
			delete this._flippedY;
			delete this._position;
			delete this._rotation;
			delete this._matrix;
			
			delete this.origin;
			delete this.scaleX;
			delete this.scaleY;
		},


	    defineProperties: function() {
	    	this._super();

			Object.defineProperties(this, {
				changed: {
					enumerable: true, 
					get: function() { return this._changed; }
				},
				
				position: {
					enumerable: true, 
					get: function() { return this._position; }
				},
				
				rotation: {
					enumerable: true, 
					get: function() { return this._rotation; }
				},

				degrees: {
					enumerable: true, 
					get: function() { return this._rotation.degrees; },
					set: function(degrees) { 
						this._changed = this._changed || this._rotation.degrees != degrees;
						this._rotation.degrees = degrees;		
					}
				},

				radians: {
					enumerable: true, 
					get: function() { return this._rotation.radians; },
					set: function(radians) { 
						this._changed = this._changed || this._rotation.radians != radians;
						this._rotation.radians = radians;
					}
				},

				x: {
					enumerable: true, 
					get: function() { 
						return this.snapToPixels ? (0.5 + this._matrix.tx) | 0 : this._matrix.tx;
					},
					set: function(x) { 
						this._changed = this._changed || this._position.x != x;
						this._position.x = x;
					}
				},

				y: {
					enumerable: true, 
					get: function() { 
						return this.snapToPixels ? (0.5 + this._matrix.ty) | 0 : this._matrix.ty;
					},
					set: function(y) { 
						this._changed = this._changed || this._position.y != y;
						this._position.y = y;
					}
				},

				scale: {
					enumerable: true, 
					get: function() { return this._scale; },
					set: function(scale) { 
						this._changed = this._changed || this._scale != scale;
						this._scale = scale;

						this.scaleX = scale;
						this.scaleY = scale;
					}
				},

				matrix: {
					enumerable: true, 
					get: function() { 
						var myFlipX = this._flippedX ? -1 : 1,
							myFlipY = this._flippedY ? -1 : 1;

						this._matrix.identity();

						this._matrix.translate(this._position.x, this._position.y);
						this._matrix.rotate(this._rotation.radians);
						this._matrix.scale(this.scaleX, this.scaleY);
						this._matrix.scale(myFlipX, myFlipY);
						
						return this._matrix;
					}
				},
			});
		}
	});
})( use("rocket88") );

/* **********************************************
     Begin graphic.component.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.GraphicComponent = rocket88.Component.extends({
		init: function(name) {
			this._super(name || "graphic.component");
			
			this.needsRender = false;
			this.visible = true;

			this._sprite = undefined;
		},
		

		update: function() {
			this._super();	
			if(!!this._sprite) {
				this._sprite.update();
			}	
		},


		dispose: function() {
			this._super();
			if(this._sprite && this._sprite.autoDispose) {
				this._sprite.dispose();
			}

			delete this._sprite;
		},


	    defineProperties: function() {
	    	this._super();

			var myProperties = {
				needsDisplay: {
					enumerable: true, 
					get: function() { return this._needDisplay; }
				},

		    	sprite: {
					enumerable: true, 
		    		get: function() { return this._sprite; },
		    		set: function(sprite) {
						if(!!this._sprite && this._sprite.autoDispose) {
							this._sprite.dispose();
						}

						this._sprite = sprite 	    			
		    		}
		    	}				
			};

			Object.defineProperties(this, myProperties);
		},
	});
})( use("rocket88") );

/* **********************************************
     Begin collision.component.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.CollisionComponent = rocket88.Component.extends({
		init: function(name) {
			this._super(name || "collision.component");
		},


		ready: function() {
			this._super();
			
			this._gameobject = this.parent;
			this._collisionSolver = this._gameobject.layer.collisionSolver;
		},


		update: function() {
			this._super();
			this._collisionSolver.addObject(this._gameobject);
		},


		test: function() {
		},


		raycast: function() {
		},


		dispose: function() {
			this._super();

			delete this._gameobject;
			delete this._collisionSolver;
		}
	});
})( use("rocket88") );


/* **********************************************
     Begin screen.component.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.ScreenComponent = rocket88.Component.extends({
		init: function(name) {
			this._super(name || "screen.Component");

			this._paintRect = new rocket88.Rectangle();
			this._transformMatrix = new rocket88.Matrix();
			this._topLeft = new rocket88.Vector();
			this._topRight = new rocket88.Vector();

			this.visible = true;
			this.alpha = 1.0;
		},
		

		ready: function() {
			this._super();
			this._gameobject = this.parent;
		},


		update: function() {
			this._super();

			this.getTransformation();
			this.getPaintRectangle();

			this._visibleOnStage = this._gameobject.graphic.sprite.visible;
		},


		getTransformation: function() {
			var myLayer = this._gameobject.layer,
				mySprite = this._gameobject.graphic.sprite;

			this._transformMatrix.identity();
			this._transformMatrix.multiply(myLayer.transform.matrix);
			this._transformMatrix.multiply(this._gameobject.transform.matrix);
			this._transformMatrix.multiply(mySprite.transform.matrix);
		},


		getPaintRectangle: function() {
			var myBounds = this._gameobject.graphic.sprite.bounds;

			this._topLeft.set(myBounds.left, myBounds.top);
			this._topLeft.rotate(this._transformMatrix).abs();

			this._topRight.set(myBounds.right, myBounds.top);
			this._topRight.rotate(this._transformMatrix).abs();

			var myX = rocket88.max(this._topLeft.x, this._topRight.x),
				myY = rocket88.max(this._topLeft.y, this._topRight.y),
				myWidth = myX << 1,
				myHeight = myY << 1;

			myX = -myX + this._transformMatrix.tx;
			myY = -myY + this._transformMatrix.ty;

			this._paintRect.set(myX, myY, myWidth, myHeight);
		},


		dispose: function() {
			this._super();

			delete this._transformMatrix;
			delete this._topRight;
			delete this._topLeft;
			delete this._gameobject;
			delete this._paintRect;
		},


	    defineProperties: function() {
	    	this._super();
	    	
	    	var myProperties = {
	    		paintRect: {
	    			enumerable: true,
	    			get: function() { return this._paintRect; }
	    		},

				transformMatrix: {
					enumerable: true, 
					get: function() { return this._transformMatrix; }
				},
	    	};

	    	Object.defineProperties(this, myProperties);
		},	
	});
})( use("rocket88") );

/* **********************************************
     Begin keys.component.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.KeysComponent = rocket88.Component.extends({
		init: function(name) {
			this._super(name || "keys.component");
			this.pressedKeys = "";

			document.onkeydown = delegate(this, this.onKeyDown);
			document.onkeyup = delegate(this, this.onKeyUp);
		},


		onKeyDown: function(event) {
			var myCode = event.keyCode;
			if(!this.keyIsDown(myCode)) {
				this.pressedKeys += "|" + myCode;
			}
		},


		onKeyUp: function(event) {
			var myCode = event.keyCode;
			if(this.keyIsDown(myCode)) {
				this.pressedKeys = this.pressedKeys.replace("|" + myCode, "");
			}			
		},


		keyIsDown: function(code) {
			return this.pressedKeys.indexOf("|" + code) > -1;
		},


		dispose: function() {
			this._super();
			delete this.pressedKeys;
		}
	});
})( use("rocket88") );

/* **********************************************
     Begin camera.js
********************************************** */

(function(rocket88) {
    "use strict";

    rocket88.Camera = rocket88.Object.extends({
        init: function(name) {
            this._super(name);
            this._type = "camera";

            this.isStatic = true;
            this.focalLength = 80;

            this._zoom = 1;
            this._inversedZoom = 1;
            
            this._transform = new rocket88.TransformComponent();
            this._transform.parent = this;
        },


        update: function() {
            this._super();
            this._transform.update();
        },

        
        dispose: function() {
            this._super();

            delete this.transform;
            delete this.viewport;
        },


        defineProperties: function() {
            this._super();
            
            var myProperties = {
                zoom: {
                    enumerable: true,
                    get: function() { return this._zoom; },
                    set: function(zoom) { 
                        this._zoom = zoom;
                        this._inversedZoom = 1 / zoom;
                    }
                },

                inversedZoom: {
                    enumerable: true,
                    get: function() { return this._inversedZoom }
                },
                
                transform: {
                    enumerable: true, 
                    get: function() { return this._transform; } 
                }
            }

            Object.defineProperties(this, myProperties);
        },
    });
})( use("rocket88") );

/* **********************************************
     Begin chase.camera.js
********************************************** */

(function(rocket88) {
    "use strict";

    rocket88.ChaseCamera = rocket88.Camera.extends({
        init: function(target) {
            this._super("chase.camera");

            if(target==undefined) {
                throw ReferenceError("Required parameter 'target' is missing");
            }

            this._super("chase.camera");

            // Public properties
            this.target = target;
            this.isStatic = false;

            this.damping = 1.0;
            this.viewport = new rocket88.Rectangle();        
        },


        update: function() {
            this._super();

            var myX = this.target.transform.x;
            var myY = this.target.transform.y;

            if (myX > this.position.x + this.viewport.right) {
                myX -= this.viewport.right;
                this.position.x += (myX - this.position.x) * this.damping;
            }
            else if (myX < this.position.x + this.viewport.left) {
                myX -= this.viewport.left;
                this.position.x += (myX - this.position.x) * this.damping;
            }

            if (myY > this.position.y + this.viewport.bottom) {
                myY -= this.viewport.bottom;
                this.position.y += (myY - this.position.y) * this.damping;
            }
            else if (myY < this.position.y + this.viewport.top) {
                myY -= this.viewport.top;
                this.position.y += (myY - this.position.y) * this.damping;
            }

            //console.log(this.position.x, this.position.y);
        },


        damping: function(value) {
            if(damping) {
                this._damping = value;
                return this;
            }

            return this._damping;
        },


        target: function(value) {
            if(value) {
                this._target = value;
                return this;
            }

            return this._target;
        },


        dispose: function() {
            this._super();
            this._target = null;
        }
    });
})( use("rocket88") );

/* **********************************************
     Begin scroll.camera.js
********************************************** */

(function(rocket88) {
	"use strict";

})( use("rocket88") );

/* **********************************************
     Begin spritesheet.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Spritesheet = Class.extends({
		init: function(data) {
			if(!data) {
				console.assert(!rocket88.showErrors, "Required argument 'data' is missing");
				return;
			}

			// Private properties
			this._rawData = data;
			this._disposed = false;
			this._firstFrame = undefined;
			this._animations = new Object()
			this._frames = new Object();

			var self = this;
			function parseData() {
				for (var name in data.frames) {
					var myFrame = data.frames[name].frame;

					var myRect = new rocket88.Rectangle(myFrame.x, myFrame.y, myFrame.w, myFrame.h);
					addFrame(name, myRect);
				}			
			}

			function addFrame(name, frame) {
				self._frames[name] = frame;

				if(!self._firstFrame) {
					self._firstFrame = frame;
				}

				var myRegExp = /(-|_)*(\d+)(\.[a-zA-Z]{3,4})$/;
				var myName = name.replace(myRegExp, "");

				if(!self._animations[myName]) {
					self._animations[myName] = new rocket88.LinkedList();
				}

				self._animations[myName].add(name);
			}

			parseData();
		},


		hasAnimation: function(name) {
			return this._animations[name] != null;
		},


		animationByName: function(name) {
			return this._animations[name];
		},


		hasFrame: function(name) {
			return this._frames[name] != null;
		},


		frameByName: function(name) {
			return this._frames[name];
		},


		dispose: function() {
	        if(!!this._disposed && rocket88.showErrors) {
	        	console.error("Unable to dispose object: " + this.name);	
	        }

			console.info(this.type + ": " + this._name + " is disposed");	
			
			delete this._rawData;
			delete this._firstFrame;			
			delete this._animations;
			delete this._frames;
		},


		defineProperties: function() {
	        var myProperties = {
	        	isDisposed: {
					enumerable: true, 
		            get: function() { return this._disposed; } 
	        	},

				rawData: {
					enumerable: true, 
		            get: function() { return this._rawData; } 
	        	},

		        frames: {
					enumerable: true, 
	    	        get: function() { return this._frames; } 
	        	},

		        firstFrame: {
					enumerable: true, 
	        	    get: function() { return this._firstFrame; } 
	        	},

		        animations: {
					enumerable: true, 
		            get: function() {
						var myNames = new Array();
						for (var name in this._animations) {
							myNames.push(name);
						}

						return myNames;
					}
				}	 
	        };

	        Object.defineProperties(this, myProperties);
	    },
	});
})( use("rocket88") );

/* **********************************************
     Begin sprite.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Sprite = rocket88.Object.extends({
		init: function(url, spritesheet) {
			if(!url) {
				console.assert(!rocket88.showErrors, "Required argument 'url' is missing");
				return;
			}

			this._url = url;
			this._currentFrame = undefined;
			this._disposed = false;
			this._transform = new rocket88.TransformComponent();
			this._sourceRect = new rocket88.Rectangle();
			this._bounds = new rocket88.Rectangle();
			this._AABB = new rocket88.Rectangle();

			if(!!spritesheet) {
				var myData = rocket88.assetStore.getAsset(spritesheet);
				this._spritesheet  = new rocket88.Spritesheet(myData);

				var mySource = this._spritesheet.firstFrame;
				this._sourceRect.copy(mySource);

				this._bounds.copy(mySource);
				this._bounds.center();
			}
		},


		showFrame: function(name) {
			if(!this._spritesheet && rocket88.showWarnings) {
				console.error("Unable to set frame on sprite: " + this._url + " Sprite doesn't have spritesheet");
			}

			var mySource = this._spritesheet.frameByName(name);
			this._sourceRect.copy(mySource);

			this._bounds.copy(mySource);
			this._bounds.center();
		},


		toCss: function() {
			var myWidth = this.bounds.size.width,
				myHeight = this.bounds.size.height,
				myLeft = -1 * myWidth >> 1,
				myTop = -1 * myHeight >> 1;

			var myCss = "position:absolute;" +
						"left:" + myLeft + "px;top:" + myTop + "px;" +
						"width:" + myWidth + "px;height:" + myHeight + "px;" +
						"background-image:url(" + this.url + ");" +
						"background-position:" + -1 * this.bounds.origin.x + "px " + -1 * this.bounds.origin.y + "px;" +
						"-moz-opacity:" + this.alpha + ";-webkit-opacity:" + this.alpha + ";-o-opacity:" + this.alpha + ";opacity:" + this.alpha + ";";

			return myCss;
		},


		dispose: function () {
	        if(this._disposed && rocket88.showErrors) {
	        	console.error("Unable to dispose object: " + this.name);	
	        }

			console.info("sprite: " + this._url + " is disposed");	

			delete this._url;
			delete this._spritesheet;
			delete this._transform;
			delete this._sourceRect;
			delete this._bounds;
			delete this._AABB;

			this._disposed = true;
		},


	    defineProperties: function() {
	        var myProperties = { 
	        	currentFrame: {
					enumerable: true, 
	            	get: function() { return this._currentFrame; } 
	        	},

		        isDisposed: { 
					enumerable: true, 
	            	get: function() { return this._disposed; } 
	        	},

		        spritesheet: { 
					enumerable: true, 
	            	get: function() { return this._spritesheet; } 
	        	},	        	

		        size: { 
					enumerable: true, 
	            	get: function() { return this._size; } 
	        	},

		        transform: { 
					enumerable: true, 
	            	get: function() { return this._transform; } 
	        	},

		        url: { 
					enumerable: true, 
	            	get: function() { return this._url; } 
	        	},

	        	sourceRect: {
	        		enumerable: true,
	        		get: function() { return this._sourceRect; }
	        	},

	        	bounds: {
	        		enumerable: true,
	        		get: function() { return this._bounds; }
	        	},
	        };

	        Object.defineProperties(this, myProperties)
	    },
	});
})( use("rocket88") );

/* **********************************************
     Begin animated.sprite.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.AnimatedSprite = rocket88.Sprite.extends({

		init: function(url, spritesheet) {
			this._super(url, spritesheet);
			if(!spritesheet) {
				console.assert(!rocket88.showErrors, "Required argument 'spritesheet' is missing");
				return;
			}

			this._super(url, spritesheet);

			// Public properties
			this.loop = true;
			this.reverse = false;

			// Private properties
			this._framerate	= 60;
			this._accumulator = 60 / 60;
			this._tick = 0;

			this._currentAnimationName = undefined;
			this._currentAnimation = undefined;
			this._running = false;
			this._stopAtTheEndOfCurrentAnimation = false;
		},

			
		update: function() {
			this._super();

			var self = this;
			if(this._running && !!this._spritesheet) {

				this._tick++;
				if (this._tick>=this._accumulator) {
					this._tick = 0;

					if(this._reversed) {
						prevFrame();
					}
					else if(this._stopAtTheEndOfCurrentAnimation) {
						this.stop();
					}
					else {
						nextFrame();
					}

					this.showFrame(this._currentFrame.data);			
				}
			}


			function nextFrame() {
				if(self._currentFrame.next) {
					self._currentFrame = self._currentFrame.next;
				}
				else if(self._stopAtTheEndOfCurrentAnimation){
					self.stop();
				}
				else if(self.loop) {
					self._currentFrame = self._currentAnimation.head;	
				}
			}


			function prevFrame() {
				if(self._currentFrame.prev) {
					self._currentFrame = self._currentFrame.prev;
				}
				else if(self.loop) {
					self._currentFrame = self._currentAnimation.tail;	
				}
			}	
		},


		play: function(animation) {
			if(this._currentAnimationName==animation) {
				return this;
			}

			this._running = true;
			this._stopAtTheEndOfCurrentAnimation = false;
			this._currentAnimationName = animation;

			this._currentAnimation 	= this.spritesheet.animationByName(animation);		
			if(this._reversed) {
				this._currentFrame	= this._currentAnimation.tail;	
			}
			else {
				this._currentFrame	= this._currentAnimation.head;
			}

			this.showFrame(this._currentFrame.data);

			return this;
		},


		stop: function() {
			this._running = false;
			this._stopAtTheEndOfCurrentAnimation = false;

			if(this._currentAnimation) {
				this._currentFrame = this._currentAnimation.head;	
				this.showFrame(this._currentFrame.data);
			}

			this._currentAnimationName = undefined;
			this._currentAnimation = undefined;

			return this;
		},


		stopAtTheEndOfCurrentAnimation: function() {
			this._stopAtTheEndOfCurrentAnimation = true;
		},


		dispose: function() {
			this._super();
			delete this._currentAnimation;
		},


	    defineProperties: function() {
	        this._super();
	        
	        var myProperties = {
	        	currentAnimation: {
					enumerable: true, 
		            get: function() { return this._currentAnimation; } 
		        },

		        isRunning: {
					enumerable: true, 
		            get: function() { return this._isRunning; } 
		        },

		        framerate: {
					enumerable: true, 
		            get: function() { return this._framerate; },
		            set: function(framerate) {
						this._framerate = framerate;
						this._accumulator = 60 / framerate;	            	
		            }
		        },
		    };

		    Object.defineProperties(this, myProperties);
	    },
	});
})( use("rocket88") );

/* **********************************************
     Begin sound.js
********************************************** */

(function(rocket88) {
	"use strict";

})( use("rocket88") );

/* **********************************************
     Begin sound.collection.js
********************************************** */

(function(rocket88) {
	"use strict";

})( use("rocket88") );

/* **********************************************
     Begin renderer.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.Renderer = rocket88.Object.extends({
		init: function(name, target) {
			this._super(name);

			if(!target) {
				throw ReferenceError("Required parameter 'target' is missing");
			}

			this._type = "renderer";
			this._target = target;
			this._buffer = new rocket88.LinkedList();
		},


		prerender: function() {
			this._buffer.empty();
			return this;
		},


		bufferObject: function(gameobject) {
			var myBounds = rocket88.director.stage.bounds,
				myPaintRect = gameobject.screen.paintRect;

			// Check if the gameobject needs to be rendered
			if(gameobject.screen.visible && myPaintRect.intersects(myBounds)) {
				this._buffer.add(gameobject);
			}

			return this;
		},


		render: function() {
			var myNode = this._buffer.head;
			while (myNode) {
				this.drawObject(myNode.data);
				myNode = myNode.next;
			}	

			return this;		
		},


		drawObject: function(gameobject) {
			return this;
		},


		dispose: function() {
			this._super();

			delete this._origin;
			delete this._target;
			delete this._buffer;
		},


	    defineProperties: function() {
	    	this._super();
	    	
	    	var myProperties = {
	    		target: {
					enumerable: true, 
	    			get: function() { return this._target; } 
	    		},

	    		transformMatrix: {
					enumerable: true, 
	    			get: function() { return this._transformMatrix; } 
	    		}
	    	};

	    	Object.defineProperties(this, myProperties);
		},
	});
})( use("rocket88") );

/* **********************************************
     Begin canvas.renderer.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.CanvasRenderer = rocket88.Renderer.extends({
		init: function(stage) {
			this._super("canvas.renderer", stage.target);

			if(stage.target.tagName.toLowerCase()!="canvas") {
				throw ReferenceError("Required property 'target' must be a canvas object");
			}

			this._context = stage.target.getContext("2d");
			this._center = new rocket88.Point();
			this._center.x = this._context.canvas.width >> 1;
			this._center.y = this._context.canvas.height >> 1;

			this.immediateMode = false;
		},


		prerender: function() {
			this._super();

			this._context.setTransform(1, 0, 0, 1, 0, 0);
			this._context.clearRect(0, 0, this._target.width, this._target.height);

			this._context.beginPath();
			this._context.strokeStyle = "gray";

			this._context.moveTo(400.5, 0);
			this._context.lineTo(400.5, 600);

			this._context.moveTo(0, 300.5);
			this._context.lineTo(800, 300.5);

			this._context.stroke();
		},


		bufferObject: function(gameobject) {
			if(this.immediateMode) {
				this.drawObject(gameobject);
				return;
			}

			this._super(gameobject);
		},


		drawObject: function(gameobject) {
			var mySprite = gameobject.graphic.sprite,
				myImage = rocket88.assetStore.getAsset(mySprite.url),
				myTransformMatrix = gameobject.screen.transformMatrix;

			var mySource = mySprite.sourceRect,
				myTarget = mySprite.bounds;

			// Reset context
			this._context.setTransform(1, 0, 0, 1, this._center.x, this._center.y);

			// Transform context according transformation matrix from the gameobject
			this._context.transform(
				myTransformMatrix.a, 
				myTransformMatrix.b, 
				myTransformMatrix.c, 
				myTransformMatrix.d, 
				myTransformMatrix.tx, 
				myTransformMatrix.ty);
		
			// Set opacity of the context
			this._context.globalAlpha = gameobject.screen.alpha;
		
			// Draw image to screen
			this._context.drawImage(
				myImage, 		
			
				// Source
				mySource.origin.x, mySource.origin.y, 
				mySource.size.width, mySource.size.height,

				// Destination
				myTarget.origin.x, myTarget.origin.y, 
				myTarget.size.width, myTarget.size.height);

			// Draw debug shapes
			this.drawDebug(gameobject);
		},

		
		drawDebug: function(gameobject) {
			var myPaintRect = gameobject.screen.paintRect,
				myBounds = gameobject.graphic.sprite.bounds,
				myTransformMatrix = gameobject.screen.transformMatrix;

			// Draw center
			this._context.beginPath();
			this._context.moveTo(0, -25);
			this._context.strokeStyle = "yellow";
			this._context.lineTo(0, 0);
			this._context.stroke();

			this._context.beginPath();
			this._context.moveTo(0, 0);
			this._context.strokeStyle = "green";
			this._context.lineTo(25, 0);
			this._context.stroke();

			// Draw sprite bounds
			this._context.beginPath();
			this._context.strokeStyle = "blue";
			this._context.rect(myBounds.origin.x, myBounds.origin.y, myBounds.size.width, myBounds.size.height);
			this._context.stroke();

			// Draw paint rectangle
			this._context.setTransform(1, 0, 0, 1, this._center.x, this._center.y);
			this._context.beginPath();
			this._context.strokeStyle = "red";
			this._context.rect(myPaintRect.origin.x, myPaintRect.origin.y, myPaintRect.size.width, myPaintRect.size.height);
			this._context.stroke();
		},


	    defineProperties: function() {
	    	this._super();
	    	
	    	Object.defineProperties(this, {
	    		context: {
					enumerable: true, 
	    			get: function() { return this._context; } 
	    		}
	    	});
		},
	});
})( use("rocket88") );

/* **********************************************
     Begin dom.renderer.js
********************************************** */

(function(rocket88) {
	"use strict";

	rocket88.HTMLRenderer = rocket88.Renderer.extends({
		init: function(target) {
			this._super("html.renderer", target);

			if(target.tagName.toLowerCase()!="div") {
				throw new ReferenceError("Required property 'target' must be a div object");
			}

			this._labelCss = "display: inline-block;" +
							 "background-color:white;" +
							 "padding:2px;" +
							 "font-family:Helvetica;" +
							 "font-size:11px;" +
							 "color:black";
		},


		prerender: function() {
			this._target.style.position = "relative";
			this._htmlString = "";
		},


		draw: function(sprite) {
			this._super(sprite);

			var myCss = this.transformMatrix.toCss() + sprite.toCss();
			var myHtml = "<div id='" + this._renderedGameObject.name + "' style='" + myCss + "'></div>";
			
			this._htmlString += myHtml;
		},


		finish: function() {
			this.target.innerHTML = this._htmlString;
		}
	});
})( use("rocket88") );